def analysis_prompt():
    return """

    You are given an NLP statement. Your task is to determine whether the statement is associated with any of the following features: plot, image, summary, or comparison. Each feature should be identified as either true or false based on the statement.

    Output format: <image> <split-token> <plot> <split-token> <comparison> <split-token> <summary>

    Consider the following:
    1) plot: If the statement requires any kind of graphical representation such as a histogram, bar plot, line chart, scatter plot, etc., mark this as 'True'.
    2) image: If the statement involves displaying any static images by retrieving it from the database, mark this as 'True'.
    3) summary: If the statement requests a brief overview or summary of the data (asked in any form), mark this as 'True'.
    4) comparison: If the statement involves comparing two or more datasets, results, or any kind of comparative analysis, mark this as 'True'.

    Use this while generating the output:
    <plot> : Boolean value indicating whether the question is associated with a plot or not. It is set to True if there is a plot asked for (associated with it) and False if not. 
    <image> : Boolean value indicating whether the question is associated with an image or not. It is set to True if there is an image asked for and the respective image field is present in the dataset, False otherwise. 
    <summary> : Boolean value indicating whether a summary of the entire dataset is asked or not. It is True if the summary of the entire table is asked, False otherwise. If it is True the SQL query generated will fetch the entire table. 
    <comparison> : Boolean value indicating whether there is a comparision between two data points asked or not. It is set to True if a comparison between two datapoints of the database is asked, False otherwise. If this is True, the SQL query will fetch all the data fields that are comparable from those two datapoints. 
    <split-token> : This is the split token generated in order to ensure that the various fields generated by the model (SQL Query, plot, image, etc) doesnt get merged with each other. 
    This is the context given to you, generate the output based on this.

    NOTE:
    1) Don't ever forget to generate the <split-token> inbetween the various field values.
    2) Ananlyse the entire statement properly before generating the values for each of the parameter mentioned
    3) Dont ever generate the names like <image>, <plot>, etc in the output
    4) Whenever asked for summary, don't forget to set the summary parameter as 'True'.
    5) It is very important to note that you shouldn't set the summary to 'True' unless they explicitly as for generating summary. Set it to false in all other cases where they don't explicitly ask for it.
    6) You dont worry about the structure of the database as of now, just analyse whether there is an image, plot, summary and comparison.
    7) Two or more field values can be 'True' at the same time.

    Don't forget that the output should be in the format: <image> <split-token> <plot> <split-token> <comparison> <split-token> <summary>, where each field (plot, image, summary, comparison) is a boolean value ('True' or 'False').

    Example for your reference:
    1) Input statement : 'Plot the histogram of the number of males and females in the database, also compare the students with id 17 and 20'
    Output : 'False <split-token> True <split-token> True <split-token> False'
    2) Input statement : 'Display the bar plot of monthly sales data'
    Output : 'False <split-token> True <split-token> False <split-token> False'
    3) Input statement : 'Compare the performance of product A and product B in the last quarter'
    Output : 'False <split-token> False <split-token> True <split-token> False'
    4) Input statement : 'Show a scatter plot of height versus weight of the participants'
    Output : 'False <split-token> True <split-token> False <split-token> False'
    5) Input statement : 'Display the image of the house with the lowest cost per square feet area, also generate the summary of the table'
    Output : 'True <split-token> False <split-token> False <split-token> True'
    6) Input statement : 'Plot a line chart of the daily active users'
    Output : 'False <split-token> True <split-token> False <split-token> False'
    7) Input statement : 'Provide a summary of the annual revenue'
    Output : 'False <split-token> False <split-token> False <split-token> True'
    8) Input statement : 'Show a scatter plot of height versus weight of the participants and compare the participants who came first, second and third'
    Output : 'False <split-token> True <split-token> True <split-token> False'
    9) Input statement : 'Compare the sales growth of this year and last year'
    Output : 'False <split-token> False <split-token> True <split-token> False'
    10) Input statement : 'Compare the revenue of the first half and the second half of the year, at the same time generating a pie chart to visualise it'
    Output : 'False <split-token> True <split-token> True <split-token> False'
    11) Input statement : 'Get the name of the student with highest average marks and his marks'
    Output : 'False <split-token> False <split-token> False <split-token> False'

    Don't forget that the output should be in the format: <image> <split-token> <plot> <split-token> <comparison> <split-token> <summary>, where each field (plot, image, summary, comparison) is a boolean value ('True' or 'False').

    """
    
    
    
    
    
    


def general_prompt(table_name:str, structure:bool=None):

    table_structure = {
    'RealEstate' : 'CREATE TABLE RealEstate (IMAGE_ID INT PRIMARY KEY, STREET VARCHAR(255), CITY VARCHAR(255), N_CITY INT, BEDROOMS INT, BATHROOMS INT, SQUARE_FEET INT, PRICE FLOAT, IMAGE LONGBLOB NOT NULL)',   # Contains the real estate data 
    'Student' : 'CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)',   # Contains the student details data 
    'MedicalRecord' : 'CREATE TABLE MedicalRecord (NAME VARCHAR(255), AGE INT, GENDER VARCHAR(255), BLOOD_TYPE VARCHAR(255), MEDICAL_CONDITION VARCHAR(255), DATE_OF_ADMISSION DATE, DOCTOR VARCHAR(255), HOSPITAL VARCHAR(255), INSURANCE_PROVIDER VARCHAR(255), BILLING_AMOUNT FLOAT, ROOM_NUMBER INT, ADMISSION_TYPE VARCHAR(255), DISCHARGE_DATE DATE, MEDICATION VARCHAR(255), TEST_RESULTS VARCHAR(255))',   # Contains the patient details data 
    }
    
    if not structure:
        structure = table_structure[table_name]
    
    prompt = f"""
    Your are an expert and intellectual person in converting English questions to SQL queries! 

    The table structure is as follows : {structure}
        
    NOTE:
    1) Don't generate values like ``` before the start of the SQL Query.
    2) Avoid including extra information or explanations in the output. Only provide the SQL query as described.
    3) Validate that the SQL query meets the conditions specified in the question and accurately reflects the table schema.
    4) Dont ever generate wrong outputs, it misleads with the quality of data that we process and use, a small error can lead to greater consequences.
    
    Examples:
    Note that the table structure is the same as mentioned above, the examples are just for extra reference, dont use the table attributes from below examples.
    1) Table Structure : CREATE TABLE head (age INTEGER)
    Question : How many heads of the departments are older than 56 ?
    Answer : SELECT COUNT(*) FROM head WHERE age > 56
    2) Table Structure : CREATE TABLE RealEstate (IMAGE_ID INT PRIMARY KEY, STREET VARCHAR(255), CITY VARCHAR(255), N_CITY INT, BEDROOMS INT, BATHROOMS INT, SQUARE_FEET INT, PRICE FLOAT, IMAGE LONGBLOB NOT NULL)
    Question : What are the number of houses in the price range of 10000 to 50000
    Answer : SELECT COUNT(*) FROM RealEstate WHERE PRICE BETWEEN 10000 AND 50000;
    3) Table Structure: CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, TotalAmount FLOAT, Status VARCHAR(255))
    Question : Get the total number of orders with a status of "Shipped"
    Answer : SELECT COUNT(*) FROM Orders WHERE Status = 'Shipped';
    4) Table Structure : CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)
    Question : Get the name of the student who scored the highest average marks
    Answer : SELECT NAME FROM Student ORDER BY (SCIENCE + ENGLISH + HISTORY + MATHS) / 4 DESC LIMIT 1;
    5) Table Structure : CREATE TABLE MedicalRecord (NAME VARCHAR(255), AGE INT, GENDER VARCHAR(255), BLOOD_TYPE VARCHAR(255), MEDICAL_CONDITION VARCHAR(255), DATE_OF_ADMISSION DATE, DOCTOR VARCHAR(255), HOSPITAL VARCHAR(255), INSURANCE_PROVIDER VARCHAR(255), BILLING_AMOUNT FLOAT, ROOM_NUMBER INT, ADMISSION_TYPE VARCHAR(255), DISCHARGE_DATE DATE, MEDICATION VARCHAR(255), TEST_RESULTS VARCHAR(255))
    Question : What is the MEDICAL_CONDITION that most of the patients have
    Answer : SELECT MEDICAL_CONDITION FROM MedicalRecord GROUP BY MEDICAL_CONDITION ORDER BY COUNT(*) DESC LIMIT 1;
    6) Table Structure : CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(255), Department VARCHAR(255), Salary FLOAT, HireDate DATE)
    Question: Find the average salary of employees in the "Sales" department
    Answer: SELECT AVG(Salary) FROM Employees WHERE Department = 'Sales';
    7) Table Structure: CREATE TABLE Books (BookID INT PRIMARY KEY, Title VARCHAR(255), Author VARCHAR(255), Genre VARCHAR(255), PublishedYear INT, Price FLOAT)
    Question: Get the titles of books published after the year 2000
    Answer: SELECT Title FROM Books WHERE PublishedYear > 2000;
    8) Table Structure : CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)
    Question : Get the number of students who scored 50 to 80 marks in MATHS
    Answer : SELECT COUNT(*) FROM Student WHERE MATHS BETWEEN 50 and 80;
    
    Remember that the only output should the SQL Query to retrieve the data asked for as a query, not anything else. 
    
    Now, convert my english statement to the required SQL Query. Be cautious, mistakes are heavily penalised here.
        
    """
    
    return prompt




def image_prompt(table_name:str, structure:bool=None):

    table_structure = {
    'RealEstate' : 'CREATE TABLE RealEstate (IMAGE_ID INT PRIMARY KEY, STREET VARCHAR(255), CITY VARCHAR(255), N_CITY INT, BEDROOMS INT, BATHROOMS INT, SQUARE_FEET INT, PRICE FLOAT, IMAGE LONGBLOB NOT NULL)',   # Contains the real estate data 
    'Student' : 'CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)',   # Contains the student details data 
    'MedicalRecord' : 'CREATE TABLE MedicalRecord (NAME VARCHAR(255), AGE INT, GENDER VARCHAR(255), BLOOD_TYPE VARCHAR(255), MEDICAL_CONDITION VARCHAR(255), DATE_OF_ADMISSION DATE, DOCTOR VARCHAR(255), HOSPITAL VARCHAR(255), INSURANCE_PROVIDER VARCHAR(255), BILLING_AMOUNT FLOAT, ROOM_NUMBER INT, ADMISSION_TYPE VARCHAR(255), DISCHARGE_DATE DATE, MEDICATION VARCHAR(255), TEST_RESULTS VARCHAR(255))',   # Contains the patient details data 
    }
    
    if not structure:
        structure = table_structure[table_name]
    
    prompt = f"""
    Your are an expert and intellectual person in converting English questions to SQL queries specifically for image retrieval and image processing!
    The question given includes retrieving an image directly or retrieving an image based on a specific condition. You have to give the SQL Query to retrieve the specified image from the Database. 

    Output format : <sql-query> <split-token> <statement>
    
    Consider the following while generating the response:
    1) <sql-query>: Generate the required SQL Query as a string here. If the database doesnt contain an image (BLOB Format), return 'None' here. Don't give any explanations here.
    2) <statement>: This is the final output english statement. This tells what is displayed in the figure window. This will tell the user based on what conditions extracted from the question, the below given image is displayed and what image is displayed with a gramatically correct syntax. If the database doesnt contain an image (BLOB Format), return the string 'The database doesn't contain an image field column in order to retrieve according to your query' here. Refer NOTE section for extra reference.
    3) <split-token> : This is the split token generated in order to ensure that the various fields generated by the model (SQL Query, plot, image, etc) doesnt get merged with each other. 
    This is the context given to you, generate the output based on this.

    The table structure is as follows : {structure}
        
    NOTE:
    1) If the database contains an image parameter (BLOB), return the code to retrieve the specified image.
    2) If the database doesn't contain the image field, return 'None'. Don't give any explanations here.
    3) If the database didn't contain any image fields according to the 2nd note, return the string 'The database doesn't contain an image field column in order to retrieve according to your query' in place of the output statement.
    4) Don't generate values like ``` before the start and and after the end of the Output
    5) Avoid including extra information or explanations in the output. Only provide the output as in the described format.
    6) Validate that the SQL query meets the conditions specified in the question and accurately reflects the table schema.
    7) Dont ever generate wrong outputs, it misleads with the quality of data that we process and use, a small error can lead to greater consequences.
    8) Strictly adhere to the output format given in the prompt.
    
    Examples:
    Note that the table structure is the same as mentioned above, the examples are just for extra reference, dont use the table attributes from below examples.
    1) Table Structure : CREATE TABLE RealEstate (IMAGE_ID INT PRIMARY KEY, STREET VARCHAR(255), CITY VARCHAR(255), N_CITY INT, BEDROOMS INT, BATHROOMS INT, SQUARE_FEET INT, PRICE FLOAT, IMAGE LONGBLOB NOT NULL)
    Question : Display the image of the house having the lowest cost per square feet area
    Answer : SELECT * FROM RealEstate ORDER BY (PRICE / SQUARE_FEET) ASC LIMIT 1; <split-token> The image of the house having the lowest cost per square feet area as requested is as follows:
    2) Table Structure : CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)
    Question : Display the image of the student with the highest score in science
    Answer : None <split-token> The database doesn't contain an image field column in order to retrieve according to your query
    3) Table Structure : CREATE TABLE MedicalRecord (NAME VARCHAR(255), AGE INT, GENDER VARCHAR(255), BLOOD_TYPE VARCHAR(255), MEDICAL_CONDITION VARCHAR(255), DATE_OF_ADMISSION DATE, DOCTOR VARCHAR(255), HOSPITAL VARCHAR(255), INSURANCE_PROVIDER VARCHAR(255), BILLING_AMOUNT FLOAT, ROOM_NUMBER INT, ADMISSION_TYPE VARCHAR(255), DISCHARGE_DATE DATE, MEDICATION VARCHAR(255), TEST_RESULTS VARCHAR(255)) 
    Question : Retrieve the image of the patient admitted most recently
    Answer : None <split-token> The database doesn't contain an image field column in order to retrieve according to your query
    4) Table Structure : CREATE TABLE Employee (EMP_ID INT PRIMARY KEY, NAME VARCHAR(255), POSITION VARCHAR(255), SALARY FLOAT, DEPARTMENT VARCHAR(255), PHOTO LONGBLOB)
    Question : Show the photo of the employee with the highest salary
    Answer : SELECT PHOTO FROM Employee ORDER BY SALARY DESC LIMIT 1; <split-token> The photo of the employee with the highest salary as requested is as follows:
    5) Table Structure : CREATE TABLE Vehicle (VEHICLE_ID INT PRIMARY KEY, MAKE VARCHAR(255), MODEL VARCHAR(255), YEAR INT, PRICE FLOAT, PHOTO LONGBLOB)
    Question : Show the photo of the cheapest vehicle
    Answer : SELECT PHOTO FROM Vehicle ORDER BY PRICE ASC LIMIT 1; <split-token> The photo of the cheapest vehicle as requested is as follows:
    6) Table Structure : CREATE TABLE Recipe (RECIPE_ID INT PRIMARY KEY, NAME VARCHAR(255), INGREDIENTS TEXT, STEPS TEXT, IMAGE BLOB)
    Question : Display the image of the recipe named "Chocolate Cake"
    Answer : SELECT IMAGE FROM Recipe WHERE NAME = 'Chocolate Cake'; <split-token> The photo of the recipe named "Chocolate Cake" as requested is as follows:
    
    
    Output format again for your reference : <sql-query> <split-token> <statement>
    
    """
    
    return prompt




def plot_prompt(table_name:str, structure:bool=None):

    table_structure = {
    'RealEstate' : 'CREATE TABLE RealEstate (IMAGE_ID INT PRIMARY KEY, STREET VARCHAR(255), CITY VARCHAR(255), N_CITY INT, BEDROOMS INT, BATHROOMS INT, SQUARE_FEET INT, PRICE FLOAT, IMAGE LONGBLOB NOT NULL)',   # Contains the real estate data 
    'Student' : 'CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)',   # Contains the student details data 
    'MedicalRecord' : 'CREATE TABLE MedicalRecord (NAME VARCHAR(255), AGE INT, GENDER VARCHAR(255), BLOOD_TYPE VARCHAR(255), MEDICAL_CONDITION VARCHAR(255), DATE_OF_ADMISSION DATE, DOCTOR VARCHAR(255), HOSPITAL VARCHAR(255), INSURANCE_PROVIDER VARCHAR(255), BILLING_AMOUNT FLOAT, ROOM_NUMBER INT, ADMISSION_TYPE VARCHAR(255), DISCHARGE_DATE DATE, MEDICATION VARCHAR(255), TEST_RESULTS VARCHAR(255))',   # Contains the patient details data 
    }
    
    if not structure:
        structure = table_structure[table_name]
    
    prompt = f"""
    Your are an expert and intellectual person in converting English questions to SQL queries specifically for plotting. You are a expert at generating queries for retrieving the data specified and required for the plot, generating the correct plot type and the output statement.

    Output format : <sql-query> <split-token> <plot-type> <split-token> <plot-title> <split-token> <plot-xlabel> <split-token> <plot-ylabel> <split-token> <statement>
    
    Consider the following while generating the response:
    1) <sql-query> : This contains the SQL query to retrieve the data in order to generate the plot asked for. 
    2) <plot-type> : This will contain the plot type from the list ['histogram', 'bar-plot', 'line-plot', 'pie-chart', 'scatter-plot']. Analyse the plot type correctly and dont generate any explanations here, only the plot type string as asked in the question.
    3) <plot-title> : This will contain the proper shrinked english title for the plot according to the question.
    4) <plot-xlabel> : This will contain the x-label to be displayed in the plot according to the question and the table structure.
    5) <plot-ylabel> : This will contain the y-label to be displayed in the plot according to the question and the table structure.
    6) <statement> : This is the final output statement. This will tell what should be displayed while displaying the plot. It contains the information about what is displayed along with the plot type in a proper gramatically correct english statement.
    7) <split-token> : This is the split token generated in order to ensure that the various fields generated by the model (SQL Query, plot, image, etc) doesnt get merged with each other. 
    This is the context given to you, generate the output based on this.

    The table structure is as follows : {structure}
        
    NOTE:
    1) Identify the required plot type properly as returning the wrong plot type might lead to critical errors.
    2) Generate the proper statement which describes the plot accuractely in the <statement> field.
    3) Generate the proper plot-title, plot-xlabel and plot-ylabel as wrong titles and labels are highly punishable.
    4) Don't generate values like ``` before the start and and after the end of the Output
    5) Avoid including extra information or explanations in the output. Only provide the output as in the described format.
    6) Validate that the SQL query meets the conditions specified in the question and accurately reflects the table schema.
    7) Dont ever generate wrong outputs, it misleads with the quality of data that we process and use, a small error can lead to greater consequences.
    8) Strictly adhere to the output format given in the prompt.
    9) While generating the queries for histograms, the label should always appear in the first column while the value should appear in the second column.
    
    Examples:
    Note that the table structure is the same as mentioned above, the examples are just for extra reference, dont use the table attributes from below examples.
    1) Table Structure : CREATE TABLE MedicalRecord (NAME VARCHAR(255), AGE INT, GENDER VARCHAR(255), BLOOD_TYPE VARCHAR(255), MEDICAL_CONDITION VARCHAR(255), DATE_OF_ADMISSION DATE, DOCTOR VARCHAR(255), HOSPITAL VARCHAR(255), INSURANCE_PROVIDER VARCHAR(255), BILLING_AMOUNT FLOAT, ROOM_NUMBER INT, ADMISSION_TYPE VARCHAR(255), DISCHARGE_DATE DATE, MEDICATION VARCHAR(255), TEST_RESULTS VARCHAR(255))
    Question : Display the histogram of the number of male and female patients.
    Answer : SELECT GENDER, COUNT(*) FROM MedicalRecord GROUP BY GENDER; <split-token> histogram <split-token> Number of Male and Female Patients <split-token> Gender <split-token> Number of Patients <split-token> The histogram displays the number of male and female patients as requested.
    2) Table Structure : CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)
    Question : Show the bar plot of average marks in Science for each section.
    Answer : SELECT SECTION, AVG(SCIENCE) FROM Student GROUP BY SECTION; <split-token> bar-plot <split-token> Average Marks in Science per Section <split-token> Section <split-token> Average Marks in Science <split-token> The bar plot displays the average marks in Science for each section as requested.
    3) Table Structure : CREATE TABLE RealEstate (IMAGE_ID INT PRIMARY KEY, STREET VARCHAR(255), CITY VARCHAR(255), N_CITY INT, BEDROOMS INT, BATHROOMS INT, SQUARE_FEET INT, PRICE FLOAT, IMAGE LONGBLOB NOT NULL)
    Question : Display the scatter plot of price vs. square feet area.
    Answer : SELECT PRICE, SQUARE_FEET FROM RealEstate; <split-token> scatter-plot <split-token> Price vs. Square Feet Area <split-token> Square Feet <split-token> Price <split-token> The scatter plot shows the relationship between price and square feet area as request
    4) Table Structure : CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)
    Question : Display the pie chart of the number of students in each section. 
    Answer :  SELECT SECTION, COUNT(*) FROM Student GROUP BY SECTION; <split-token> pie-chart <split-token> Number of Students in Each Section <split-token> Section <split-token> Number of Students <split-token> The pie chart shows the number of students in each section as requested
    5) Table Structure : CREATE TABLE Vehicle (VEHICLE_ID INT PRIMARY KEY, MAKE VARCHAR(255), MODEL VARCHAR(255), YEAR INT, PRICE FLOAT, PHOTO LONGBLOB)
    Question : Display the bar plot of the average price of vehicles for each make.
    Answer : SELECT MAKE, AVG(PRICE) FROM Vehicle GROUP BY MAKE; <split-token> bar-plot <split-token> Average Price of Vehicles per Make <split-token> Make <split-token> Average Price <split-token> The bar plot displays the average price of vehicles for each make as requested.
    6) Table Structure : CREATE TABLE Sales (SALE_ID INT PRIMARY KEY, PRODUCT_NAME VARCHAR(255), CATEGORY VARCHAR(255), QUANTITY INT, SALE_DATE DATE, REVENUE FLOAT)
    Question : Show the line plot of total revenue over time.
    Answer : SELECT SALE_DATE, SUM(REVENUE) FROM Sales GROUP BY SALE_DATE; <split-token> line-plot <split-token> Total Revenue Over Time <split-token> Sale Date <split-token> Revenue <split-token> The line plot shows the total revenue over time as requested.
    7)Table Structure : CREATE TABLE Product (PRODUCT_ID INT PRIMARY KEY, NAME VARCHAR(255), CATEGORY VARCHAR(255), STOCK INT, PRICE FLOAT, IMAGE LONGBLOB)
    Question : Display the pie chart of the number of products in each category.
    Answer : SELECT CATEGORY, COUNT(*) FROM Product GROUP BY CATEGORY; <split-token> pie-chart <split-token> Number of Products in Each Category <split-token> Category <split-token> Number of Products <split-token> The pie chart shows the number of products in each category as requested.
    8) Table Structure : CREATE TABLE Event (EVENT_ID INT PRIMARY KEY, NAME VARCHAR(255), LOCATION VARCHAR(255), DATE DATE, ATTENDANCE INT, IMAGE LONGBLOB)
    Question: Show the bar plot of the number of events per location.
    Answer: SELECT LOCATION, COUNT(*) FROM Event GROUP BY LOCATION; <split-token> bar-plot <split-token> Number of Events per Location <split-token> Location <split-token> Number of Events <split-token> The bar plot shows the number of events per location as requested.
    
    
    Output format again for your reference : <sql-query> <split-token> <plot-type> <split-token> <plot-title> <split-token> <plot-xlabel> <split-token> <plot-ylabel> <split-token> <statement>
    
    """
    
    return prompt



def summary_prompt(data):

    data_string = data.to_string(index=False)

    prompt = f"""
    You are an expert at analyzing and summarizing data. Please review the following data table and provide a comprehensive summary that includes:
    
    - Key points and trends observed in the data.
    - Any notable comparisons between the data points.
    - Any additional insights or observations that can be drawn from the data.

    Data Table:
    {data_string}

    Your summary should be concise, accurate, and informative.
    """

    return prompt



def data_prompt(data):
    
    data_string = data.to_string(index=False)
    
    prompt = f"""
    Generate the line which tells the user what is being displayed by the following data string, which is the answer to the question asked.
    
    {data_string}
    """
    
    return prompt




def summary_sql_prompt(table_name:str, structure:bool=None):

    table_structure = {
    'RealEstate' : 'CREATE TABLE RealEstate (IMAGE_ID INT PRIMARY KEY, STREET VARCHAR(255), CITY VARCHAR(255), N_CITY INT, BEDROOMS INT, BATHROOMS INT, SQUARE_FEET INT, PRICE FLOAT, IMAGE LONGBLOB NOT NULL)',   # Contains the real estate data 
    'Student' : 'CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(255), GENDER VARCHAR(255), AGE INT, SECTION CHAR, SCIENCE INT, ENGLISH INT, HISTORY INT, MATHS INT)',   # Contains the student details data 
    'MedicalRecord' : 'CREATE TABLE MedicalRecord (NAME VARCHAR(255), AGE INT, GENDER VARCHAR(255), BLOOD_TYPE VARCHAR(255), MEDICAL_CONDITION VARCHAR(255), DATE_OF_ADMISSION DATE, DOCTOR VARCHAR(255), HOSPITAL VARCHAR(255), INSURANCE_PROVIDER VARCHAR(255), BILLING_AMOUNT FLOAT, ROOM_NUMBER INT, ADMISSION_TYPE VARCHAR(255), DISCHARGE_DATE DATE, MEDICATION VARCHAR(255), TEST_RESULTS VARCHAR(255))',   # Contains the patient details data 
    }
    
    if not structure:
        structure = table_structure[table_name]
    
    prompt = f"""
    Your are an expert and intellectual person in converting English questions to SQL queries.
    Generate the SQL Query that selects the first 512 rows from the table except images.
    
    The table structure is as follows : {structure}
    
    NOTE:
    1) Don't generate values like ``` before the start of the SQL Query.
    2) Avoid including extra information or explanations in the output. Only provide the SQL query as described.
    3) Validate that the SQL query meets the conditions specified in the question and accurately reflects the table schema.
    4) Dont ever generate wrong outputs, it misleads with the quality of data that we process and use, a small error can lead to greater consequences.
    5) Dont generate the query to select any image data from the table. It is highly punishable.
    6) Generate the query to select the first 512 rows and all columns except the columns that contain images.
    
    Now, generate the SQL query required.
        
    """
    
    return prompt
